{"version":3,"sources":["__generated__/app.js","swgOutputSelection.js","controller/AppController.js","controller/SwaggerExplainedController.js","directive/swgOutput.js"],"names":["app","angular","module","service","$rootScope","selected","this","set","value","hasChanged","$broadcast","get","run","$log","controller","$scope","$http","swgOutputSelection","$location","explainJsonSpec","object","type","items","_explained","annotation","spec","schema","properties","name","property","allOf","i","externalDocs","xml","showSpec","explained","url","search","method2annotation","post","put","patch","delete","head","options","$watch","swagger","success","info","contact","license","paths","path","pathItem","method","operation","parameters","parameter","responses","j","response","headers","k","header","definitions","definition","securityDefinitions","securityDefinition","tags","tag","error","status","substr","$on","event","updateSelection","directive","$compile","extractExplained","item","$parent","template","join","scope","asProperty","compile","element","compiledContents","contents","remove","clone","append","isArray","push","bind","e","$","target","$apply","hoverClass"],"mappings":"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","file":"app.min.js","sourcesContent":["var app = angular.module('app',[\"hc.marked\"]);","app.service('swgOutputSelection', function ($rootScope) {\n    var selected = -'NaN';\n    this.set = function (value) {\n        var hasChanged = selected !== value;\n        selected = value;\n        if (hasChanged) {\n            $rootScope.$broadcast('swgOutputSelectionChanged', value);\n        }\n        return hasChanged;\n    };\n    this.get = function () {\n        return selected;\n    };\n});","app.run(function ($rootScope, $log) {\n    $rootScope.$log = $log;\n});\n","app.controller('SwaggerExplainedController', function ($scope, $http, swgOutputSelection, $location) {\n    \n    $scope.url = $location.search().url || 'https://cdn.rawgit.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-simple.json';\n\n    var method2annotation = {\n        get: \"@SWG\\\\Get\",\n        post: \"@SWG\\\\Post\",\n        put: \"@SWG\\\\Put\",\n        patch: \"@SWG\\\\Patch\",\n        delete: \"@SWG\\\\Delete\",\n        head: \"@SWG\\\\Head\",\n        options: \"@SWG\\\\Options\"\n    };\n    function explainJsonSpec(object, type) {\n        if (object.items) {\n            if (type === \"parameter\" && object.in !== \"body\" || type === \"header\") {\n                object.items._explained = {\n                    annotation: \"@SWG\\\\Items\",\n                    spec: \"itemsObject\"\n                };\n                explainJsonSpec(object.items, \"items\");\n            } else {\n                object.items._explained = {\n                    annotation: \"@SWG\\\\Items\",\n                    spec: \"schemaObject\"\n                };\n                explainJsonSpec(object.items, \"items\");\n            }\n        }\n        if (object.schema) {\n            object.schema._explained = {\n                annotation: \"@SWG\\\\Schema\",\n                spec: \"schemaObject\"\n            };\n            explainJsonSpec(object.schema, \"schema\");\n        }\n        if (object.properties) {\n            for (var name in object.properties) {\n                var property = object.properties[name];\n                property._explained = {\n                    annotation: \"@SWG\\\\Property\",\n                    spec: \"schemaObject\"\n                };\n                explainJsonSpec(property, \"property\");\n            }\n            \n        }\n        if (object.allOf) {\n            for (var i in object.allOf) {\n                var schema = object.allOf[i];\n                schema._explained = {\n                    spec: \"schemaObject\"\n                };\n                explainJsonSpec(schema, \"schema\");\n            }\n        }\n        if (object.externalDocs) {\n            object.externalDocs._explained = {\n                annotation: \"@SWG\\\\ExternalDocumentation\",\n                spec: \"externalDocumentationObject\"\n            }\n        }\n        if (object.xml) {\n            object.xml._explained = {\n                annotation: \"@SWG\\\\Xml\",\n                spec: \"xmlObject\"\n            }\n        }\n    }\n    function showSpec(name) {\n        if (!$scope.spec || !$scope.spec[name]) { // no spec entry found/ not loaded\n            return;\n        }\n        if (!$scope.explained) { // No explained selected?\n            swgOutputSelection.set({spec: name});\n            return;\n        }\n        if ($scope.explained.spec !== name) { // isn't already visible?\n            swgOutputSelection.set({spec: name});\n            return;\n        }\n    }\n    $scope.$watch('url', function (url) {\n        $scope.swagger = \"Loading...\";\n        $http.get(url).success(function (swagger) {\n            // augment data with explanations\n            swagger._explained = {\n                annotation: \"@SWG\\\\Swagger\",\n                spec: \"swaggerObject\"\n            };\n            if (swagger.info) {\n                swagger.info._explained = {\n                    annotation: \"@SWG\\\\Info\",\n                    spec: \"infoObject\"\n                };\n                if (swagger.info.contact) {\n                    swagger.info.contact._explained = {\n                        annotation: \"@SWG\\\\Contact\",\n                        spec: \"contactObject\"\n                    };\n                }\n                if (swagger.info.license) {\n                    swagger.info.license._explained = {\n                        annotation: \"@SWG\\\\License\",\n                        spec: \"licenseObject\"\n                    };\n                }\n            }\n            if (swagger.paths) {\n                for (var path in swagger.paths) {\n                    var pathItem = swagger.paths[path];\n                    pathItem._explained = {\n                        annotation: \"@SWG\\\\Path\",\n                        spec: \"pathItemObject\"\n                    };\n\n                    for (var method in pathItem) {\n                        var operation = pathItem[method];\n                        operation._explained = {\n                            spec: \"operationObject\",\n                            annotation: method2annotation[method]\n                        };\n                        if (operation.parameters) {\n                            for (var i in operation.parameters) {\n                                var parameter = operation.parameters[i];\n                                parameter._explained = {\n                                    spec: 'parameterObject',\n                                    annotation: '@SWG\\\\Parameter'\n                                };\n                                explainJsonSpec(parameter, \"parameter\");\n                            }\n                        }\n                        if (operation.responses) {\n                            for (var j in operation.responses) {\n                                var response = operation.responses[j];\n                                response._explained = {\n                                    spec: 'responseObject',\n                                    annotation: '@SWG\\\\Response'\n                                };\n                                explainJsonSpec(response, \"response\");\n                                if (response.headers) {\n                                    for (var k in response.headers) {\n                                        var header = response.headers[k];\n                                        header._explained = {\n                                            spec: \"headerObject\",\n                                            annotation: \"@SWG\\\\Header\"\n                                        }\n                                    }\n                                    explainJsonSpec(header, \"header\");\n                                }\n                            }\n                            operation.responses._explained = {\n                                spec: \"responsesObject\"\n                            };\n                        }\n                    }\n                }\n                swagger.paths._explained = {\n                    spec: \"pathsObject\"\n                };\n            }\n            if (swagger.definitions) {\n                for (var name in swagger.definitions) {\n                    var definition = swagger.definitions[name];\n                    definition._explained = {\n                        spec: \"schemaObject\",\n                        annotation: \"@SWG\\\\Definition\"\n                    };\n                    explainJsonSpec(definition, \"definition\");\n                }\n                swagger.definitions._explained = {\n                    spec: \"definitionsObject\"\n                };\n            }\n            if (swagger.securityDefinitions) {\n                for (var name in swagger.securityDefinitions) {\n                    var securityDefinition = swagger.securityDefinitions[name];\n                    securityDefinition._explained = {\n                        annotation: \"@SWG\\\\SecurityScheme\",\n                        spec: \"securitySchemeObject\"\n                    }\n                }\n            }\n            if (swagger.tags) {\n                for (var i in swagger.tags) {\n                    var tag = swagger.tags[i];\n                    tag._explained = {\n                        annotation: \"@SWG\\\\Tag\",\n                        spec: \"tagObject\"\n                    }\n                }\n            }\n            $scope.swagger = swagger;\n        }).catch(function (response) {\n            $scope.swagger = {error: \"Failed to load\", url: url, status: response.status};\n        });\n    });\n    $http.get('swagger-spec.json').success(function (spec) {\n        $scope.spec = spec;\n        showSpec($location.path().substr(1));\n    });\n    $scope.$on('swgOutputSelectionChanged', function (event, explained) {\n        $scope.explained = explained;\n        if ($location.path().substr(1) !== $scope.explained.spec) {\n            $location.path($scope.explained.spec);\n        }\n    });\n    $scope.updateSelection = function (explained) {\n        swgOutputSelection.set(explained);\n    };\n    $scope.$on('$locationChangeSuccess', function () {\n        showSpec($location.path().substr(1));\n    });\n});\n","app.directive('swgOutput', function ($compile, swgOutputSelection) {\n    /**\n     * \n     * @param {Scope} $scope\n     * @returns {Object} explained\n     */\n    function extractExplained($scope) {\n        if ($scope.property && typeof $scope.property.value === 'object' && $scope.property.value._explained) {\n            return $scope.property.value._explained;\n        }\n        if (typeof $scope.item === 'object' && $scope.item._explained) {\n            return $scope.item._explained;\n        }\n        if (typeof $scope.value === 'object' && $scope.value._explained) {\n            return $scope.value._explained;\n        }\n        if ($scope.$parent) {\n            return extractExplained($scope.$parent);\n        }\n    }\n    return {\n        template: [\n            '<span ng-switch=\"type\" ng-class=\"[\\'swg-output\\', \\'swg-output--\\' + type]\">',\n            '<span ng-switch-when=\"string\">\"<span class=\"swg-output__string\">{{value}}</span>\"</span>',\n            '<span ng-switch-when=\"number\">{{value}}</span>',\n            '<span ng-switch-when=\"boolean\">{{value}}</span>',\n            '<span ng-switch-when=\"undefined\">undefined</span>',\n            '<span ng-switch-when=\"object\">{',\n            '  <div class=\"swg-output__indent\">',\n            '    <div ng-repeat=\"property in properties\" ng-class=\"[hoverClass(property.value._explained)]\">',\n            '      \"<span class=\"swg-output__property\">{{property.name}}</span>\"<span class=\"swg-output__double-colon\">:</span>',\n            '      <swg-output value=\"property.value\" as-property=\"true\"></swg-output><span ng-if=\"!$last\">,</span>',\n            '    </div>',\n            '  </div>',\n            '}</span>',\n            '<span ng-switch-when=\"array\">[',\n            '  <div class=\"swg-output__indent\">',\n            '    <div ng-repeat=\"item in value track by $index\" ng-class=\"[hoverClass(item._explained)]\">',\n            '      <swg-output value=\"item\"></swg-output><span ng-if=\"!$last\">,</span>',\n            '    </div>',\n            '  </div>',\n            ']</span>',\n            '<span ng-switch-default>[swg-output error] Type \"{{type}}\" not implemented</span>',\n            '</span>'\n        ].join(''),\n        scope: {\n            value: '=',\n            asProperty: '='\n        },\n        compile: function (element) {\n            var contents = element.contents().remove();\n            var compiledContents;\n            return {\n                post: function ($scope, element) {\n                    // Compile the contents\n                    if (!compiledContents) {\n                        compiledContents = $compile(contents);\n                    }\n                    // Re-add the compiled contents to the element\n                    compiledContents($scope, function (clone) {\n                        element.append(clone);\n                    });\n                    $scope.$watch('value', function (value) {\n                        $scope.type = angular.isArray(value) ? 'array' : typeof value;\n                        $scope.properties = [];\n                        if ($scope.type === 'object') {\n                            for (var property in value) {\n                                if (property !== '_explained') {\n                                    $scope.properties.push({\n                                        name: property,\n                                        value: value[property]\n                                    });\n                                }\n                            }\n                        }\n                    });\n\n                    element.bind('mousemove', function (e) {\n                        var explained = extractExplained($(e.target).scope());\n                        if (explained && swgOutputSelection.set(explained)) {\n                            $scope.$apply();\n                        }\n                    });\n                    $scope.hoverClass = function (explained) {\n                        if (explained) {\n                            if (explained === swgOutputSelection.get()) {\n                                return 'swg-output--active';\n                            }\n                            return 'swg-output__hover';\n                        }\n                    };\n                }\n\n            };\n        }\n    };\n});"],"sourceRoot":"/source/"}